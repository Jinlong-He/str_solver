declare: Set(R3, P27, P23, P25, P22, P24, P26, P60, P3, P17, P21, P20, R0, P1, P57, P54, R8, P61, P56, R9)
#intconstraints:
P61 + -1*P26 != 0 & P61 + -1*P25 != 0 & P61 + -1*P24 != 0 & P61 + -1*P23 != 0 & P61 + -1*P22 != 0 & P61 + -1*P21 != 0 & P60 != 0 & P57 + -1*P26 != 0 & P57 + -1*P25 != 0 & P57 + -1*P24 != 0 & P57 + -1*P23 != 0 & P57 + -1*P22 != 0 & P57 + -1*P21 != 0 & P56 != 0 & P27 + -1*P26 != 0 & P27 + -1*P25 != 0 & P27 + -1*P24 != 0 & P27 + -1*P23 != 0 & P27 + -1*P22 != 0 & P27 + -1*P21 != 0 & P26 + -1*P20 != 0 & P25 + -1*P20 != 0 & P24 + -1*P23 != 0 & P24 + -1*P22 != 0 & P24 + -1*P21 != 0 & P24 + -1*P20 != 0 & P23 + -1*P20 != 0 & P22 + -1*P20 != 0 & P21 + -1*P20 != 0 & P17 != 0 & P54 + -1*P1 + -1 >= 0 & P54 + -1 >= 0 & P3 + -1 >= 0 & P1 >= 0 & ((((R13 + -1 * P1) = 0) & ((P3 + -1 * R13) >= 0)) | (((R13 + -1 * P3) = 0) & (((P1 + -1 * P3) + -1) >= 0))) & ((((R12 + -1 * P1) = 0) & ((P3 + -1 * R12) >= 0)) | (((R12 + -1 * P3) = 0) & (((P1 + -1 * P3) + -1) >= 0))) & ((((R11 + -1 * P1) = 0) & ((P3 + -1 * R11) >= 0)) | (((R11 + -1 * P3) = 0) & (((P1 + -1 * P3) + -1) >= 0))) & ((((R10 + -1 * P1) = 0) & ((P3 + -1 * R10) >= 0)) | (((R10 + -1 * P3) = 0) & (((P1 + -1 * P3) + -1) >= 0))) & ((((R9 + -1 * (P3 + -1)) = 0) & ((P60 + -1 * R9) >= 0)) | (((R9 + -1 * P60) = 0) & ((((P3 + -1) + -1 * P60) + -1) >= 0))) & ((((R8 + -1 * (P3 + -1)) = 0) & ((P60 + -1 * R8) >= 0)) | (((R8 + -1 * P60) = 0) & ((((P3 + -1) + -1 * P60) + -1) >= 0))) & ((((((R7 + -1 * ((P1 + 1) + ((P54 + -1 * P1) + -1))) = 0) & ((((P1 + 1) + P56) + -1 * R7) >= 0)) | (((R7 + -1 * ((P1 + 1) + P56)) = 0) & (((((P54 + -1 * P1) + -1) + -1 * P56) + -1) >= 0))) & ((R6 + -1 * (P1 + 1)) = 0)) | ((((-1 * (P1 + 1) + -1) >= 0) | (((P54 + -1 * P1) + -1) = 0)) & (P56 = 0))) & (P1 >= 0) & (0 = 0) & ((R4 + -1 * P54) = 0) & ((R3 + -1 * P3) = 0) & ((R2 + -1 * P17) = 0) & ((R1 + -1 * P56) = 0) & ((R0 + -1 * P60) = 0) & TRUE
$
#automata:
#states: 2
#init: 0
#final: 1,
#transitons: 
0;1;9;9;List()
#register: 
#end
$
$
#automata:
#states: 1
#init: 0
#final: 0,
#transitons: 
0;0;91;127;List()
0;0;45;64;List()
0;0;0;43;List()
#register: 
#end
#automata:
#states: 1
#init: 0
#final: 0,
#transitons: 
0;0;0;127;List(1)
#register: R2;
#end
#automata:
#states: 1
#init: 0
#final: 0,
#transitons: 
0;0;62;127;List()
0;0;0;60;List()
#register: 
#end
#automata:
#states: 1
#init: 0
#final: 0,
#transitons: 
0;0;0;127;List()
#register: 
#end
#automata:
#states: 1
#init: 0
#final: 0,
#transitons: 
0;0;0;127;List()
#register: 
#end
$
$
#automata:
#states: 2
#init: 0
#final: 1,
#transitons: 
1;1;45;127;List()
0;1;61;61;List()
0;0;62;127;List()
1;1;0;43;List()
0;0;45;60;List()
0;0;0;43;List()
#register: 
#end
#automata:
#states: 1
#init: 0
#final: 0,
#transitons: 
0;0;0;127;List(1)
#register: R4;
#end
#automata:
#states: 3
#init: 0
#final: 2,
#transitons: 
1;1;0;60;List(1)
2;2;0;127;List(0)
1;2;61;61;List(0)
0;2;61;61;List(0)
1;1;62;127;List(1)
0;0;0;127;List(1)
0;1;0;60;List(1)
0;1;62;127;List(1)
#register: R5;
#end
#automata:
#states: 3
#init: 0
#final: 0,1,2,
#transitons: 
0;1;0;127;List(0, 1, 1)
1;1;0;127;List(0, 1, 1)
2;2;0;127;List(0, 0, 0)
1;2;0;127;List(0, 0, 0)
0;0;0;127;List(1, 1, 0)
#register: R6;R7;R1;
#end
#automata:
#states: 2
#init: 0
#final: 0,1,
#transitons: 
1;1;0;127;List(0, 0)
0;1;0;127;List(0, 0)
0;0;0;127;List(1, 1)
#register: R10;
#end
#automata:
#states: 4
#init: 0
#final: 1,2,3,
#transitons: 
0;0;14;127;List(1, 1)
1;1;13;13;List(1, 1)
1;2;0;127;List(0, 0)
0;0;0;12;List(1, 1)
1;0;0;12;List(1, 1)
2;2;0;127;List(0, 0)
1;0;14;127;List(1, 1)
3;3;0;127;List(1, 0)
0;1;13;13;List(1, 1)
1;3;0;127;List(1, 0)
3;2;0;127;List(0, 0)
#register: R11;
#end
#automata:
#states: 3
#init: 0
#final: 1,2,
#transitons: 
1;0;0;31;List(1)
1;2;0;127;List(0)
1;0;33;127;List(1)
0;1;32;32;List(1)
2;2;0;127;List(0)
1;1;32;32;List(1)
0;0;0;31;List(1)
0;0;33;127;List(1)
#register: R12;
#end
#automata:
#states: 3
#init: 0
#final: 0,1,2,
#transitons: 
0;1;0;127;List(1, 0, 0)
2;2;0;127;List(0, 0)
1;1;0;127;List(1, 0, 0)
0;0;0;127;List(1, 1, 1)
1;2;0;127;List(0, 0)
0;2;0;127;List(0, 0)
#register: R13;
#end
$
$
#automata:
#states: 2
#init: 0
#final: 1,
#transitons: 
0;1;10;10;List()
#register: 
#end
$
